// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MapKit;
using CoreLocation;
using System.Collections.Generic;
using System.Linq;
using GrawApp.Helper;

namespace GrawApp
{
    public partial class PathViewController : UIViewController
    {
        CLLocationManager LocationManager = new CLLocationManager();
        MapDelegate Delegate = new MapDelegate();
        public PathViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            mapView.Delegate = Delegate;
            LocationManager.AuthorizationChanged += (sender, args) =>
            {
                Console.WriteLine("Authorization changed to: {0}", args.Status);
            };
            LocationManager.RequestWhenInUseAuthorization();
            GetPath();
        }

        void GetPath()
        {
            var locations = new List<CLLocationCoordinate2D>();
            var appDelegate = UIApplication.SharedApplication.Delegate as AppDelegate;
            var data = appDelegate.ProfileData;

            foreach (var item in data)
            {
                locations.Add(new CLLocationCoordinate2D() { Latitude = item.Latitude, Longitude = item.Longitude });
            }

            if (locations.Count > 0)
            {
                var polyline = MKPolyline.FromCoordinates(locations.ToArray());
                mapView.AddOverlay(polyline);

                var startLocation = new CLLocation(locations[0].Latitude,
                                                   locations[0].Longitude);
                var endLocation = new CLLocation(locations.Last().Latitude,
                                                 locations.Last().Longitude);
                var distance = startLocation.DistanceFrom(endLocation);


                var region = MKCoordinateRegion.FromDistance(locations[(locations.Count / 2)],
                                                              distance + 10000, distance + 10000);
                mapView.SetRegion(region, animated: false);

                var annoStart = new FlightAnnotation(title: "Starting Point".GetLocalString(),
                                                     subtitle: "",
                                                     coordinate: locations[0]);
                mapView.AddAnnotation(annoStart);


                var annoEnd = new FlightAnnotation(title: "End Point".GetLocalString(),
                                                   subtitle: "",
                                                   coordinate: locations.Last());
                annoEnd.TintColor = UIColor.Purple;

                mapView.AddAnnotation(annoEnd);
            }
        }

        class MapDelegate : MKMapViewDelegate
        {
            //static string annotationId = "ConferenceAnnotation";
            public override MKOverlayRenderer OverlayRenderer(MKMapView mapView, IMKOverlay overlay)
            {
                if (overlay is MKPolyline)
                {
                    var polyLine = overlay as MKPolyline;
                    var polyLineView = new MKPolylineRenderer(polyLine)
                    {
                        StrokeColor = UIColor.Red,
                        LineWidth = 3
                    };
                    return polyLineView;
                }

                return new MKOverlayRenderer();
            }


        }

        public class FlightAnnotation : MKAnnotation
        {

            CLLocationCoordinate2D coord;

            public override CLLocationCoordinate2D Coordinate { get { return coord; } }
            public override void SetCoordinate(CLLocationCoordinate2D value)
            {
                coord = value;
            }

            string title, subtitle;
            //public override CLLocationCoordinate2D Coordinate => throw new NotImplementedException();

            public override string Title { get { return title; } }
            public override string Subtitle { get { return subtitle; } }
            public UIColor TintColor { get; set; }

            public FlightAnnotation(string title,
                             string subtitle, CLLocationCoordinate2D coordinate)
            {
                coord = coordinate;
                this.title = title;
                this.subtitle = subtitle;
                TintColor = UIColor.Red;
            }



        }
    }
}
