// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using CoreGraphics;
using Foundation;
using GrawApp.Controller.Messages;
using UIKit;

namespace GrawApp
{
	public partial class MessagePageViewController : UIPageViewController
	{
        MessagePageDataSource MessageDataSource;
        public UIPageControl PageControl { get; set; }

		public MessagePageViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            EdgesForExtendedLayout = UIRectEdge.None;
            this.DidFinishAnimating += (sender, e) => {
                if (e.Completed)
                {
                    var value = e.PreviousViewControllers[0].RestorationIdentifier;
                    Console.WriteLine($"{value}");
                    if (!string.IsNullOrEmpty(value))
                    {
                        var index = MessageDataSource.ViewControllerIdentifiers.IndexOf(value);
                        //PageControl.CurrentPage = index;
                    }
                }
            };
            NavigationController.InteractivePopGestureRecognizer.Enabled = false;
            MessageDataSource = new MessagePageDataSource();
            PageControl = new UIPageControl();

            //PageSource.PageControl = PageControl;
            MessageDataSource.ParentViewController = this;
            this.DataSource = MessageDataSource;


            ConfigurePages();
            var controller = MessageDataSource.GetViewControllerByIndex(0);

            SetViewControllers(new UIViewController[] { controller }, UIPageViewControllerNavigationDirection.Forward,
                                true, null);
        }

        public void ConfigurePages()
        {
            PageControl = new UIPageControl(new CGRect(0,
                                                       this.View.Bounds.GetMinX(),
                                                       UIScreen.MainScreen.Bounds.Width,
                                                       height: 50));
            PageControl.Pages = MessageDataSource.ViewControllerIdentifiers.Count;
            PageControl.CurrentPage = 0;
            PageControl.Enabled = true;
            PageControl.TintColor = UIColor.Black;
            PageControl.PageIndicatorTintColor = UIColor.LightGray;
            PageControl.CurrentPageIndicatorTintColor = UIColor.Black;
            this.View.AddSubview(PageControl);
        }
	}

    public class MessagePageDataSource : UIPageViewControllerDataSource
    {

        public List<string> ViewControllerIdentifiers { get; set; } = new List<string> { "temp100", "tempEnd" };
        //public UIPageControl PageControl { get; set; }

        public MessagePageViewController ParentViewController { get; set; }

        int PreviousIndex = 0;

        public override UIViewController GetNextViewController(UIPageViewController pageViewController, UIViewController referenceViewController)
        {
            var pageContent = referenceViewController as MessageBaseViewController;

            Console.WriteLine($"Next Page -- {pageContent.RestorationIdentifier}");
            if (pageContent == null)
            {
                return null;
            }
            var index = ViewControllerIdentifiers.IndexOf(pageContent.RestorationIdentifier);
            Console.WriteLine($"Next Page -- Index:{index}");
            ParentViewController.PageControl.CurrentPage = index;
            if (index >= ViewControllerIdentifiers.Count - 1)
            {
                return null;
            }

            index++;
            return GetViewControllerByIndex(index);
        }

        public override UIViewController GetPreviousViewController(UIPageViewController pageViewController, UIViewController referenceViewController)
        {
            var pageContent = referenceViewController as MessageBaseViewController;
            Console.WriteLine($"Previuous Page -- {pageContent.RestorationIdentifier}");
            if (pageContent == null)
            {
                return null;
            }
            var index = ViewControllerIdentifiers.IndexOf(pageContent.RestorationIdentifier);
            ParentViewController.PageControl.CurrentPage = index;
            Console.WriteLine($"Previuous Page -- Index:{index}");
            //var indexCheck = viewControllerIdentifiers.IndexOf();

            if (index <= 0)
            {
                return null;
            }

            index--;
            return GetViewControllerByIndex(index);
        }


        public UIViewController GetViewControllerByIndex(int index)
        {

            var storyboard = UIStoryboard.FromName("Main", null);
            var nc = storyboard.InstantiateViewController(ViewControllerIdentifiers[index]) as MessageBaseViewController;
            nc.Index = index;
            return nc;

        }
    }
}
