// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CoreLocation;
using Foundation;
using GrawApp.Helper;
using GrawApp.Model;
using MapKit;
using RestSharp;
using UIKit;

namespace GrawApp.Controller.Raw
{
	public partial class PageTwoController : RawBaseViewController
	{
        CLLocationManager _locationManager = new CLLocationManager();
        string _jsonResult;
		public PageTwoController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            MapView.Delegate = new MapDelegate();
            MapView.ScrollEnabled = false;
            _locationManager.AuthorizationChanged += (sender, args) =>
            {
                Console.WriteLine("Authorization changed to: {0}", args.Status);
            };
            _locationManager.RequestWhenInUseAuthorization();
        }

        public override void SetData(RawData data)
        {
            if(!string.IsNullOrEmpty(data.Url))
            {
                LoadData(data.Url);
            }
        }

         void LoadData(string url)
        {
            var client = new RestClient(url);
            var request = new RestRequest();
            client.ExecuteAsync(request, response =>
            {
                if(!string.IsNullOrEmpty(response.Content))
                {
                    _jsonResult = response.Content;
                    InvokeOnMainThread( () =>
                    {
                         ShowPath();
                    });
                }
            });
        }

         async void ShowPath()
        {
            var inputController = new InputDataController();
            var data = await inputController.GetListAsync(_jsonResult);
            var locations = new List<CLLocationCoordinate2D>();


            foreach (var item in data)
            {
                locations.Add(new CLLocationCoordinate2D() { Latitude = item.Latitude, Longitude = item.Longitude });
            }
            MapView.RemoveAnnotations(MapView.Annotations);
            if (locations.Count > 0)
            {
                var polyline = MKPolyline.FromCoordinates(locations.ToArray());
                MapView.AddOverlay(polyline);

                var startLocation = new CLLocation(locations[0].Latitude,
                                                   locations[0].Longitude);
                var endLocation = new CLLocation(locations.Last().Latitude,
                                                 locations.Last().Longitude);
                var distance = startLocation.DistanceFrom(endLocation);


                var region = MKCoordinateRegion.FromDistance(locations[(locations.Count / 2)],
                                                              distance + 10000, distance + 10000);
                MapView.SetRegion(region, animated: false);

                var annoStart = new FlightAnnotation(title: "Starting point",
                                                     subtitle: "",
                                                     coordinate: locations[0]);
                MapView.AddAnnotation(annoStart);


                var annoEnd = new FlightAnnotation(title: "End point",
                                                   subtitle: "",
                                                   coordinate: locations.Last());
                annoEnd.TintColor = UIColor.Purple;

                MapView.AddAnnotation(annoEnd);
            }

        }

    }


}
