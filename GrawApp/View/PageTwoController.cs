// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using CoreLocation;
using Foundation;
using GrawApp.Model;
using MapKit;
using RestSharp;
using UIKit;

namespace GrawApp.Controller.Raw
{
	public partial class PageTwoController : RawBaseViewController
	{
        CLLocationManager _locationManager = new CLLocationManager();
        string _jsonResult;
		public PageTwoController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            MapView.Delegate = new MapDelegate();
            _locationManager.AuthorizationChanged += (sender, args) =>
            {
                Console.WriteLine("Authorization changed to: {0}", args.Status);
            };
            _locationManager.RequestWhenInUseAuthorization();
        }

        public override void SetData(RawData data)
        {
            if(!string.IsNullOrEmpty(data.Url))
            {
                LoadData(data.Url);
            }
        }

         void  LoadData(string url)
        {
            var client = new RestClient(url);
            var request = new RestRequest();
            client.ExecuteAsync(request, response =>
            {
                if(!string.IsNullOrEmpty(response.Content))
                {
                    _jsonResult = response.Content;
                    InvokeOnMainThread( () =>
                    {
                         ShowPath();
                    });
                }
            });
        }

         async void ShowPath()
        {
            var inputController = new InputDataController();
            var data = await inputController.GetListAsync(_jsonResult);

        }

    }

    class MapDelegate : MKMapViewDelegate
    {
        //static string annotationId = "ConferenceAnnotation";
        public override MKOverlayRenderer OverlayRenderer(MKMapView mapView, IMKOverlay overlay)
        {
            if (overlay is MKPolyline)
            {
                var polyLine = overlay as MKPolyline;
                var polyLineView = new MKPolylineRenderer(polyLine)
                {
                    StrokeColor = UIColor.Red,
                    LineWidth = 3
                };
                return polyLineView;
            }

            return new MKOverlayRenderer();
        }


    }
}
