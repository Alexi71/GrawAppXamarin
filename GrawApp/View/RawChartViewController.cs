// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using CoreGraphics;
using Foundation;
using GrawApp.Model;
using RestSharp;
using Syncfusion.SfChart.iOS;
using UIKit;

namespace GrawApp.Controller.Raw
{
    public partial class RawChartViewController :RawBaseViewController
	{
        SFChart Chart;
        ChartDelegate CDelegate;
        string _jsonResult;

		public RawChartViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            EdgesForExtendedLayout = UIRectEdge.None;
            Chart = new SFChart();
            CDelegate = new ChartDelegate();
            Chart.Delegate = CDelegate;
            var sampleFrame = new CGRect(ChartView.Bounds.Location.X,
                                         ChartView.Bounds.GetMinY(),
                                         ChartView.Bounds.Width,
                                         ChartView.Bounds.Height);
            Chart.Frame = sampleFrame;
            Chart.TranslatesAutoresizingMaskIntoConstraints = false;

            View.AddSubview(Chart);

            var horizontalConstraint = NSLayoutConstraint.Create(Chart, NSLayoutAttribute.Top,
                                                              NSLayoutRelation.Equal,
                                                              ChartView,
                                                              NSLayoutAttribute.Top, 1, 0);

            var verticalConstraint = NSLayoutConstraint.Create(Chart,
                                                                NSLayoutAttribute.Bottom,
                                                                 NSLayoutRelation.Equal,
                                                                ChartView,
                                                                NSLayoutAttribute.Bottom, 1, 0);
            var widthConstraint = NSLayoutConstraint.Create(Chart,
                                                               NSLayoutAttribute.Width,
                                                              NSLayoutRelation.Equal,
                                                              ChartView, NSLayoutAttribute.Width, 1, 0);
            var heightConstraint = NSLayoutConstraint.Create(Chart,
                                                               NSLayoutAttribute.Height,
                                                                NSLayoutRelation.Equal,
                                                               ChartView,
                                                               NSLayoutAttribute.Height, 1, 0);
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] { horizontalConstraint, verticalConstraint, widthConstraint, heightConstraint });

            var appDelegate = UIApplication.SharedApplication.Delegate as AppDelegate;
            var rawData =  appDelegate.RawData;

            if(!string.IsNullOrEmpty(rawData?.Url))
            {
                LoadData(rawData?.Url);
            }

        }

        public override void SetData(RawData data)
        {
            if (!string.IsNullOrEmpty(data.Url))
            {
                LoadData(data.Url);
            }
        }

        void LoadData(string url)
        {
            var client = new RestClient(url);
            var request = new RestRequest();
            client.ExecuteAsync(request, response =>
            {
                if (!string.IsNullOrEmpty(response.Content))
                {
                    _jsonResult = response.Content;
                    InvokeOnMainThread(() =>
                    {
                        ShowData();
                    });
                }
            });
        }

        async void ShowData()
        {
            var inputController = new InputDataController();
            var data = await inputController.GetListAsync(_jsonResult);
            var ReducedData = new List<InputData>();
            if (data != null)
            {
                ReducedData = data.Where(x => Convert.ToInt32(x.Time) % 600 == 0).ToList();
                Console.WriteLine("Reduced data created");
            }

            Chart.Series.Clear();
            Chart.Legend.Visible = true;
            Chart.Legend.ToggleSeriesVisibility = true;
            var axisX = new SFNumericalAxis
            {
                Interval = new NSNumber(600)
            };


            axisX.Title.Text = new NSString("Time in min");
            var axisY = new SFNumericalAxis
            {
                Visible = false
            };
            Chart.PrimaryAxis = axisX;
            Chart.SecondaryAxis = axisY;
            var chartController = new ChartBaseViewController();

            var temperaturSeries = chartController.GetSeries(data, "Temperature", "Time", "Temperature",
                                                             chartController.Colors["Temperature"],
                                          false, 0, 0, false, 0, 100);



            Chart.Series.Add(temperaturSeries);

            var humditySeries = chartController.GetSeries(data, "Humidity", "Time", "Humidity",
                                                          chartController.Colors["Humidity"],
                                          false, 0, 0, true, 0, 100, true, true, false, false);


            Chart.Series.Add(humditySeries);


            var series = chartController.GetSeries(data, "Pressure", "Time", "Pressure",
                                                   chartController.Colors["Pressure"],
                                   false, 0, 0, true, 1, 1200, true, true, false, false, false, true);


            Chart.Series.Add(series);

            series = chartController.GetSeries(data, "Wind speed", "Time", "WindSpeed",
                                               chartController.Colors["WindSpeed"],
                               false, 0, 0, true, 0, 150, true, true, false, false);
            Chart.Series.Add(series);

            var pointSeries = chartController.GetPointSeries(ReducedData, "Temperature", "Time", "Temperature",
                                                             chartController.Colors["Temperature"],
                                          false, 0, 0, false, 0, 100);
            Chart.Series.Add(pointSeries);

            pointSeries = chartController.GetPointSeries(ReducedData, "Humidity", "Time", "Humidity",
                                                         chartController.Colors["Humidity"],
                                          false, 0, 0, true, 0, 100, true, true, false, false);
            Chart.Series.Add(pointSeries);

            pointSeries = chartController.GetPointSeries(ReducedData, "Pressure", "Time", "Pressure",
                                                         chartController.Colors["Pressure"],
                                         false, 0, 0, true, 1, 1200, true, true, false, false, false, true);
            Chart.Series.Add(pointSeries);

            pointSeries = chartController.GetPointSeries(ReducedData, "Wind speed", "Time", "WindSpeed",
                                                         chartController.Colors["WindSpeed"],
                                         false, 0, 0, true, 0, 150, true, true, false, false);
            Chart.Series.Add(pointSeries);

            //var test = GetNewSeries(ReducedData, typeof(SFScatterSeries), "Wind speed", "Time", "WindSpeed",
            //Colors["WindSpeed"],
            //false, 0, 0, true, 0, 150, false);



        }

    }
}
